import { withAuth } from 'next-auth/middleware';
import { NextResponse } from 'next/server';
// import {getToken} from 'next-auth/jwt'

export default withAuth(
  function middleware(req, context) {
    // to get the token, either of the ff. will work:
    const token = req.nextauth.token; // token attached to req by next-auth
    // const token = await getToken({ req });

    // console.log('token===>', token);
    // console.log('pathname===>', req.nextUrl.pathname);
    // console.log('req.url===>', req.url);
    // console.log('context===>', context);

    const isAuth = !!token;

    // protect /api/auth/signin page since middleware not working | may be because page is generated by next-auth
    const isAuthRoute = req.nextUrl.pathname.startsWith('/api/auth/signin');
    // || req.nextUrl.pathname.startsWith('/register');

    // currently not working
    if (isAuthRoute) {
      if (isAuth) {
        return NextResponse.redirect(new URL('/dashboard/user', req.url));
      }

      return null;
    }

    // const isProtectedRoute = req.nextUrl.pathname.startsWith('/api');
    // already protected with matcher

    if (!isAuth) {
      let from = req.nextUrl.pathname;
      if (req.nextUrl.search) {
        from += req.nextUrl.search;
      }

      // return NextResponse.redirect(
      //   new URL(`/api/auth/signin?from=${encodeURIComponent(from)}`, req.url),
      // );
      // what is "?from=" used for? "?from=" can be used in the next-auth signin function since it is passed as a query param

      // better to use "?callbackUrl="  since redirect callback of next-auth will automatically execute when a callbackUrl is used
      return NextResponse.redirect(
        new URL(
          `/api/auth/signin?callbackUrl=${encodeURIComponent(from)}`,
          req.url,
        ),
      );
    }
  },
  {
    // next-auth gets the NEXTAUTH_SECRET by default
    secret: process.env.NEXTAUTH_SECRET,
    callbacks: {
      // execute middleware() if authorized() returns true
      authorized({ token, req }) {
        // console.log("authorized token====>", token)

        // /admin requires admin role
        // if (req.nextUrl.pathname === '/admin') {
        //   return token?.role === 'ADMIN';
        // }

        // execute middleware only if there is a valid token
        // return !!token;

        // always execute custom middleware if true
        // if false, withAuth middleware will be executed but not the custom middleware
        return true;
      },
    },
  },
);

// shortcut to the above code
// export { default } from 'next-auth/middleware';

export const config = {
  // execute withAuth() if route matches the following
  // matcher: ['/profile'],
  // matcher: ["/((?!register|api|login).*)"], // match any path not /(register|api|login)
  // matcher: ['/dashboard/user'], // exact match /dashboard/user
  // matcher: ['/((?!dashboard|api).*)'], // match any path not exactly /(dashboard|api) | excludes /dashboard/nested/paths
  // matcher: ['/api/auth/signin', '/register', '/dashboard/:path*'], // match any path that starts with /dashboard | match with /api/auth/signin currently not working
  matcher: ['/dashboard/:path*', '/api/:path*'],
};

// there is a bug with <Link>, matcher:[], and req.nextUrl.pathname because of how <Link> rewrites the history

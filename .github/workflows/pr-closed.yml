name: Closed PR into Dev/Main (Merged / Unmerged)

on:
  workflow_dispatch:
  pull_request:
    branches: [dev, main, merge]
    types: [closed]

env:
  NODE_VERSION: 18.13.0

jobs:
  prechecks-pr-closed-dev:
    # if: github.base_ref == 'dev'
    if: github.base_ref == 'merge'
    runs-on: ubuntu-latest
    environment: preview
    env:
      PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PSCALE_SERVICE_TOKEN_ID }}
      PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PSCALE_SERVICE_TOKEN }}
      PSCALE_ORG_NAME: ${{ vars.PSCALE_ORG_NAME }}
      PSCALE_DB_NAME: ${{ vars.PSCALE_DB_NAME }}
    outputs:
      DB_CHANGES: ${{ steps.db_changes.outputs.DB_CHANGES }}
      PSCALE_BRANCH_NAME: ${{ steps.branch_name.outputs.PSCALE_BRANCH_NAME }}
    steps:
      - name: Check github context values
        run: echo "github.base_ref ${{ github.base_ref }}"
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Make shell scripts executable
        run: chmod -R +x ./my-scripts/
      - name: Check DB changes on PR (Head vs. Base)
        id: db_changes
        working-directory: ./my-scripts/pscale/
        run: |
          COMMIT_ON_HEAD=${{ github.event.pull_request.head.sha }}
          COMMIT_ON_BASE=${{ github.event.pull_request.base.sha }}

          source ./check-db-changes.sh $COMMIT_ON_HEAD $COMMIT_ON_BASE

          echo "DB_CHANGES: ${DB_CHANGES}"
          echo "ERROR: $ERROR"
          echo "DB_CHANGES=${DB_CHANGES}" >> "${GITHUB_OUTPUT}"
          echo "ERROR=${ERROR}" >> "${GITHUB_OUTPUT}"
      - name: Planetscale Setup
        if: steps.db_changes.outputs.DB_CHANGES == 'true'
        id: pscale_setup
        uses: planetscale/setup-pscale-action@v1
      - name: Get Pscale Branch Name
        if: steps.pscale_setup.outcome == 'success'
        id: branch_name
        working-directory: ./my-scripts/pscale/
        shell: bash
        run: |
          GITHUB_BRANCH_NAME=${{ github.head_ref }}
          GITHUB_PR_NUMBER=${{ github.event.pull_request.number }}

          ./get-pscale-branch-name.sh $GITHUB_BRANCH_NAME $GITHUB_PR_NUMBER

          echo "outputs: PSCALE_BRANCH_NAME / SHORTENED_GH_BRANCH_NAME"

  # no need to check pull_request activity type if closed
  # if: github.base_ref == 'dev' && github.event.pull_request.state == 'closed' && github.event.pull_request.merged == false
  # if: github.base_ref == 'dev' && needs.prechecks-pr-closed-dev.outputs.DB_CHANGES == true
  pscale-cleanup-pr-dev:
    if: github.base_ref == 'merge' && needs.prechecks-pr-closed-dev.outputs.DB_CHANGES == true
    needs: prechecks-pr-closed-dev
    runs-on: ubuntu-latest
    environment: preview
    env:
      PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PSCALE_SERVICE_TOKEN_ID }}
      PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PSCALE_SERVICE_TOKEN }}
      PSCALE_ORG_NAME: ${{ vars.PSCALE_ORG_NAME }}
      PSCALE_DB_NAME: ${{ vars.PSCALE_DB_NAME }}
      PSCALE_BRANCH_NAME: ${{ needs.prechecks-pr-closed-dev.outputs.PSCALE_BRANCH_NAME }}
      # DB_CHANGES: ${{ needs.prechecks-pr-closed-dev.outputs.DB_CHANGES }}
    steps:
      - name: Planetscale Setup
        id: pscale_setup
        uses: planetscale/setup-pscale-action@v1
      - name: Get Pscale DR info for Branch, if exists
        id: existing_dr
        working-directory: ./my-scripts/pscale/
        run: |
          ./check-dr-exists.sh "${PSCALE_DB_NAME}" "${PSCALE_BRANCH_NAME}" "${PSCALE_ORG_NAME}"

          echo "step outputs: DR_EXISTS | DR_NUMBER | DR_BRANCH | DR_INTO_BRANCH | DR_APPROVED | DR_STATE | DR_DEPLOY_STATE | DR_DEPLOYABLE"

      # no need to close DR since will be closed after deleting branch
      # - name: Close Pscale Deploy Request
      #   if: steps.existing_dr.outcome == 'success' && github.event.pull_request.merged == false
      #   run: |
      #     PSCALE_DB_NAME=${{ env.PSCALE_DB_NAME }}
      #     DR_NUMBER=${{ steps.existing_dr.outputs.DR_NUMBER }}
      #     PSCALE_ORG_NAME=${{ env.PSCALE_ORG_NAME }}
      #     pscale deploy-request close $PSCALE_DB_NAME $DR_NUMBER --org $PSCALE_ORG_NAME
      - name: Deploy Pscale Deploy Request
        if: steps.existing_dr.outcome == 'success' && github.event.pull_request.merged == true
        id: deploy_dr
        run: pscale deploy-request deploy ${{ env.PSCALE_DB_NAME }} ${{ env.PSCALE_BRANCH_NAME }} --org ${{ env.PSCALE_ORG_NAME }}
        # run: pscale deploy-request deploy ${{ env.PSCALE_DB_NAME }} ${{ steps.existing_dr.outputs.DR_NUMBER }} --org ${{ env.PSCALE_ORG_NAME }}
      - name: Skip Revert Pscale Deploy Request
        if: steps.deploy_dr.outcome == 'success' && github.base_ref == 'merge'
        run: pscale deploy-request skip-revert ${{ env.PSCALE_DB_NAME }} ${{ steps.existing_dr.outputs.DR_NUMBER }} --org ${{ env.PSCALE_ORG_NAME }}
      - name: Install NodeJS
        if: steps.deploy_dr.outcome == 'success'
        id: install_nodejs
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'
      - name: Check Cache for dependencies needed for Prisma DB push and Seed/Reset
        if: steps.install_nodejs.outcome == 'success'
        id: cache_deps
        uses: actions/cache@v3
        with:
          path: ./node_modules
          key: deps-node-modules-${{ hashFiles('package-lock.json') }}
      - name: Install dependencies to enable Prisma DB Push and Seed/Reset
        if: steps.cache_deps.outcome == 'success' && steps.cache_deps.outputs.cache-hit != 'true'
        id: install_deps
        run: npm ci
      # ENABLE THIS AFTER TESTING!!!!!!!!!!!!!!!!!!!!!!!!
      - name: Prisma DB Push & DB Seed/Reset
        if: false
        run: DATABASE_URL=${{ secrets.PSCALE_SRC_BRANCH_DATABASE_URL }} npm run db:reset

      # need to check DR if State=closed??? we can already delete it right away
      # only delete pscale branch if STATE=closed and DEPLOY_STATE=complete ??? or just delete w/o checking
      # need to check since for gh main branch, we do manual deploy-request apply, skip-revert, and "branch delete" and so that this workflow is more flexible and reusable
      - name: Close Pscale Deploy Request
        if: github.event.pull_request.merged == false
        run: pscale deploy-request close
      - name: Check existing Pscale DR STATE and DEPLOY_STATE
        id: dr_state
        working-directory: ./my-scripts/pscale/
        run: |
          ./check-dr-exists.sh "${PSCALE_DB_NAME}" "${PSCALE_BRANCH_NAME}" "${PSCALE_ORG_NAME}"

          echo "step outputs: DR_EXISTS | DR_NUMBER | DR_BRANCH | DR_INTO_BRANCH | DR_APPROVED | DR_STATE | DR_DEPLOY_STATE | DR_DEPLOYABLE"
      # should always run when pull_request is closed (whether merged or not) and DR_STATE is closed (whether DEPLOY_State=complete or not)
      - name: Delete Pscale Branch
        if: steps.dr_state.outputs.DR_STATE == 'closed'
        run: pscale branch delete ${{ env.PSCALE_DB_NAME }} ${{ env.PSCALE_BRANCH_NAME }} --org ${{ env.PSCALE_ORG_NAME }} --force

  # vercel-deploy-dev:
  #   if: github.base_ref == 'dev' && github.event.pull_request.merged == true && needs.prechecks-pr-closed-dev.outputs.DB_CHANGES == true
  #   needs: prechecks-pr-closed-dev
  #   runs-on: ubuntu-latest
  #   environment: preview
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #     - name: Make shell scripts executable
  #       run: chmod -R +x ./.pscale/cli-helper-scripts/ ./my-scripts/
  # prisma db push can be placed in pscale-cleanup
  # vercel automatically deploys on commits to dev and main so this job is not needed

  # prechecks-pr-closed-main:
  #   if: github.base_ref == 'main'
  #   runs-on: ubuntu-latest
  #   environment: production

  # pscale-cleanup-pr-main:
  #   if: github.base_ref == 'main'
  #   needs: prechecks-pr-closed-main
  #   runs-on: ubuntu-latest
  #   environment: production

  # vercel-deploy-main:
  #   if: github.base_ref == 'main' && github.event.pull_request.merged == true
  #   needs: prechecks-pr-closed-main
  #   runs-on: ubuntu-latest
  #   environment: production

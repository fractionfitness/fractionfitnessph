name: Prechecks - Merge PR into Dev/Main Branch

on:
  pull_request:
    branches: [main, dev, merge]
    types: [
        opened,
        synchronize,
        edited,
        reopened,
        unlocked,
        # ready_for_review,
        # review_requested,
      ]

env:
  NODE_VERSION: 18.13.0

jobs:
  pr-into-merge:
    if: github.base_ref == 'merge'
    uses: ./.github/workflows/pscale-dr-check.yml
    with:
      gh-environment: Preview
    secrets:
      pscale-token: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
      pscale-token-id: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}

  pr-into-dev:
    if: github.base_ref == 'dev'
    uses: ./.github/workflows/pscale-dr-check.yml
    with:
      gh-environment: Preview
    secrets:
      pscale-token: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
      pscale-token-id: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}

  pr-into-main:
    if: github.base_ref == 'main'
    uses: ./.github/workflows/pscale-dr-check.yml
    with:
      gh-environment: Production
    secrets:
      pscale-token: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
      pscale-token-id: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}

  # prechecks-pr-merge-dev:
  #   # if: github.base_ref == 'dev'
  #   if: github.base_ref == 'merge'
  #   runs-on: ubuntu-latest
  #   environment: Preview
  #   env:
  #     PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
  #     PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}
  #     PSCALE_ORG_NAME: ${{ vars.PSCALE_ORG_NAME }}
  #     PSCALE_DB_NAME: ${{ vars.PSCALE_DB_NAME }}
  #   steps:
  #     - name: Check github context values
  #       run: |
  #         echo "github.base_ref ${{ github.base_ref }}"
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - name: Make shell scripts executable
  #       run: chmod -R +x ./my-scripts/
  #     - name: Check DB changes on PR (Head vs. Base)
  #       id: db_changes
  #       working-directory: ./my-scripts/pscale/
  #       run: |
  #         COMMIT_ON_HEAD=${{ github.event.pull_request.head.sha }}
  #         COMMIT_ON_BASE=${{ github.event.pull_request.base.sha }}

  #         source ./check-db-changes.sh $COMMIT_ON_HEAD $COMMIT_ON_BASE

  #         echo "DB_CHANGES: ${DB_CHANGES}"
  #         echo "ERROR: $ERROR"
  #         echo "DB_CHANGES=${DB_CHANGES}" >> "${GITHUB_OUTPUT}"
  #         echo "ERROR=${ERROR}" >> "${GITHUB_OUTPUT}"
  #     - name: Planetscale Setup
  #       if: steps.db_changes.outputs.DB_CHANGES == 'true'
  #       id: pscale_setup
  #       uses: planetscale/setup-pscale-action@v1
  #     # incorrect conditional, since this step will still fire, if previous step is skipped
  #     # if: success()
  #     - name: Get Pscale Branch Name
  #       if: steps.pscale_setup.outcome == 'success'
  #       id: branch_name
  #       working-directory: ./my-scripts/pscale/
  #       shell: bash
  #       run: |
  #         GITHUB_BRANCH_NAME=${{ github.head_ref }}
  #         GITHUB_PR_NUMBER=${{ github.event.pull_request.number }}

  #         ./get-pscale-branch-name.sh $GITHUB_BRANCH_NAME $GITHUB_PR_NUMBER

  #         echo "outputs: SHORTENED_GH_BRANCH_NAME / PSCALE_BRANCH_NAME"
  #     - name: Get Pscale DR info for Branch, if exists
  #       if: steps.branch_name.outcome == 'success'
  #       id: dr_exists
  #       working-directory: ./my-scripts/pscale/
  #       run: |
  #         PSCALE_BRANCH_NAME=${{ steps.branch_name.outputs.PSCALE_BRANCH_NAME }}

  #         ./check-dr-exists.sh $PSCALE_DB_NAME $PSCALE_BRANCH_NAME $PSCALE_ORG_NAME

  #         echo "step outputs: DR_EXISTS | DR_NUMBER | DR_BRANCH | DR_INTO_BRANCH | DR_APPROVED | DR_STATE | DR_DEPLOY_STATE | DR_DEPLOYABLE"
  #     - name: Check if Pscale DR is ready for deployment
  #       if: steps.dr_exists.outcome == 'success'
  #       working-directory: ./my-scripts/pscale/
  #       run: |
  #         EXISTS=${{ steps.dr_exists.outputs.DR_EXISTS }}
  #         STATE=${{ steps.dr_exists.outputs.DR_STATE }}
  #         APPROVED=${{ steps.dr_exists.outputs.DR_APPROVED }}
  #         DEPLOYMENT_STATE=${{ steps.dr_exists.outputs.DR_DEPLOY_STATE }}
  #         DEPLOYABLE=${{ steps.dr_exists.outputs.DR_DEPLOYABLE }}

  #         source ./check-dr-deployment-state.sh

  # # prechecks-pr-merge-main:
  # #   if: github.base_ref == 'main'
  # #   runs-on: ubuntu-latest
  # #   environment: production
  # #   env:
  # #     PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PSCALE_SERVICE_TOKEN_ID }}
  # #     PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PSCALE_SERVICE_TOKEN }}
  # #     PSCALE_ORG_NAME: ${{ vars.PSCALE_ORG_NAME }}
  # #     PSCALE_DB_NAME: ${{ vars.PSCALE_DB_NAME }}

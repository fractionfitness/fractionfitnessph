name: Planetscale DR Approve

on:
  workflow_call:
    inputs:
      gh-environment:
        description: Github environment
        required: true
        type: string
      gh-branch:
        description: Github Branch w/c triggered calling workflow
        required: true
        type: string
      gh-pr-target:
        description: Github Pull Request Target Branch
        required: true
        type: string
    secrets:
      pscale-token:
        required: true
      pscale-token-id:
        required: true

env:
  NODE_VERSION: 18.13.0

jobs:
  pscale-dr-approve:
    runs-on: ubuntu-latest
    environment: ${{ inputs.gh-environment }}
    env:
      PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.pscale-token-id }}
      PLANETSCALE_SERVICE_TOKEN: ${{ secrets.pscale-token }}
      PSCALE_ORG_NAME: ${{ vars.PSCALE_ORG_NAME }}
      PSCALE_DB_NAME: ${{ vars.PSCALE_DB_NAME }}
      GITHUB_BRANCH_NAME: ${{ inputs.gh-branch }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Make shell scripts executable
        run: chmod -R +x ./my-scripts/pscale/
      - name: Planetscale Setup
        uses: planetscale/setup-pscale-action@v1
      - name: Get Shortened Github Branch Name
        id: shortened_gh_branch_name
        working-directory: ./my-scripts/pscale/
        run: |
          GITHUB_BRANCH_NAME=${{ env.GITHUB_BRANCH_NAME }}
          GITHUB_PR_NUMBER=""

          ./get-pscale-branch-name.sh $GITHUB_BRANCH_NAME $GITHUB_PR_NUMBER

          echo "Step Outputs: SHORTENED_GH_BRANCH_NAME / PSCALE_BRANCH_NAME"

      # get SHORTENED_GH_BRANCH_NAME and use this to get Pscale Branch Name, since we don't know the Github branch's corresponding PR number
      - name: Get Pscale Branch Name (w/o knowing the PR number)
        id: branch_name
        working-directory: ./my-scripts/pscale/
        run: |
          output=$(eval "pscale branch list ${{ env.PSCALE_DB_NAME }} --org ${{ env.PSCALE_ORG_NAME }} | grep -w \"${{ steps.shortened_gh_branch_name.outputs.SHORTENED_GH_BRANCH_NAME }}\" | awk -F' ' '{print \$1}' " 2>&1)

          echo "PSCALE_BRANCH_NAME=$output" >> "$GITHUB_OUTPUT"

          echo "Step Outputs: PSCALE_BRANCH_NAME"
      - name: Get Pscale DR info for Branch, if exists
        id: existing_dr
        working-directory: ./my-scripts/pscale/
        run: |
          ./check-dr-exists.sh ${{ env.PSCALE_DB_NAME }} ${{ steps.branch_name.outputs.PSCALE_BRANCH_NAME }} ${{ env.PSCALE_ORG_NAME }}

          echo "DR_EXISTS: $DR_EXISTS"

          echo "Step Outputs: DR_EXISTS | DR_NUMBER | DR_BRANCH | DR_INTO_BRANCH | DR_APPROVED | DR_STATE | DR_DEPLOY_STATE | DR_DEPLOYABLE"

      # no need to really do this step since "pscale deploy-request review" will error out if nonexistent DR or any other errors | cannot move this to previous step since that step does not set DR_EXISTS as an environment variable
      - name: Stop workflow and error out if Pscale DR does not exist
        run: |
          DR_EXISTS=${{ steps.existing_dr.outputs.DR_EXISTS }}
          DR_NUMBER=${{ steps.existing_dr.outputs.DR_NUMBER }}
          GITHUB_BRANCH_NAME=${{ env.GITHUB_BRANCH_NAME }}

          if [ "$DR_EXISTS" == "true" ]; then
            echo "Pscale DR (number: ${DR_NUMBER}) exists for the Github Branch ($GITHUB_BRANCH_NAME)"
            exit 0
          else
            echo "Pscale DR does not exist for the Github Branch ($GITHUB_BRANCH_NAME)"
            exit 1
          fi

      - name: Approve Pscale Deploy Request
        if: steps.existing_dr.outputs.DR_EXISTS == 'true'
        run: |
          pscale deploy-request review ${{ env.PSCALE_DB_NAME }} ${{ steps.existing_dr.outputs.DR_NUMBER }} --org ${{ env.PSCALE_ORG_NAME }} --approve
